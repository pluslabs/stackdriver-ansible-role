#! /usr/bin/python

# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import urllib.request, urllib.error, urllib.parse

from ansible.module_utils.basic import *

DOCUMENTATION = """
---
module: check_uri
short_description: Check that an HTTP request succeeds with status code 200.
description:
  - Checks that an HTTP request succeeds with status code 200.
  - This is a stripped-down alternative to M(uri), based on Python's built-in
    C(urllib2) instead of C(httplib2).
options:
  url:
    description:
      - URL as accepted by Python's C(urllib2.urlopen()).'
    required: true
  user:
    description:
      - User name for Basic authentication.
    required: false
    default: ""
  password:
    description:
      - Password for Basic authentication.
    required: false
    default: ""
  timeout:
    description:
      - Socket-level timeout in seconds.
    required: false
    default: 5
"""

def main():
    module = AnsibleModule(
        argument_spec=dict(
            url=dict(required=True),
            user=dict(required=False, default=''),
            password=dict(required=False, default=''),
            timeout=dict(required=False, default=5, type='int'),
        ),
    )

    url = module.params['url']
    username = module.params['user']
    password = module.params['password']
    timeout = module.params['timeout']

    if username:
        password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
        password_mgr.add_password(None, url, username, password)
        handler = urllib.request.HTTPBasicAuthHandler(password_mgr)
        opener = urllib.request.build_opener(handler)
        urllib.request.install_opener(opener)

    try:
        f = urllib.request.urlopen(url, timeout=timeout)
    except (OSError, urllib.error.URLError) as e:
        module.fail_json(msg=str(e))

    if f.getcode() == 200:
        module.exit_json(content=f.read())
    else:
        module.fail_json(msg='Got status code {}.'.format(f.getcode()))

if __name__ == '__main__':
    main()
